{"version":3,"sources":["webpack:///./node_modules/markdown-it/lib/common/utils.js","webpack:///./node_modules/markdown-it/lib/rules_block/heading.js","webpack:///./node_modules/markdown-it/lib/index.js","webpack:///./node_modules/markdown-it/lib/token.js","webpack:///./node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///./node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///./node_modules/markdown-it/lib/presets/zero.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///./node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///./node_modules/markdown-it/lib/rules_core/block.js","webpack:///./node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///./node_modules/markdown-it/lib/presets/commonmark.js","webpack:///./node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///./node_modules/markdown-it/lib/ruler.js","webpack:///./node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///./node_modules/markdown-it/lib/rules_block/list.js","webpack:///./node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///./node_modules/markdown-it/lib/parser_inline.js","webpack:///./node_modules/markdown-it/lib/helpers/index.js","webpack:///./node_modules/markdown-it/lib/common/html_re.js","webpack:///./node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///./node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///./node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///./node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///./node_modules/markdown-it/lib/parser_block.js","webpack:///./node_modules/markdown-it/lib/renderer.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///./node_modules/markdown-it/lib/rules_block/table.js","webpack:///./node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///./node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///./node_modules/markdown-it/lib/presets/default.js","webpack:///./node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///./node_modules/markdown-it/lib/rules_inline/image.js","webpack:///./node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///./node_modules/markdown-it/lib/rules_block/code.js","webpack:///./node_modules/markdown-it/lib/rules_core/inline.js","webpack:///./node_modules/markdown-it/lib/parser_core.js","webpack:///./node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text.js","webpack:///./node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///./node_modules/markdown-it/lib/common/entities.js","webpack:///./node_modules/markdown-it/lib/rules_block/fence.js","webpack:///./node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///./node_modules/markdown-it/lib/rules_inline/link.js","webpack:///./node_modules/markdown-it/index.js","webpack:///./node_modules/markdown-it/lib/rules_block/reference.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///./node_modules/markdown-it/lib/common/html_blocks.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///./node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///./node_modules/markdown-it/lib/rules_block/hr.js"],"names":["_hasOwnProperty","Object","prototype","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","mdurl","ucmicro","assign","obj","sources","Array","slice","arguments","forEach","TypeError","keys","isString","toString","_class","unescapeMd","str","indexOf","replace","unescapeAll","match","escaped","entity","name","code","charCodeAt","test","toLowerCase","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","concat","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","trim","toUpperCase","module","state","startLine","endLine","silent","level","tmp","token","bMarks","tShift","max","eMarks","sCount","blkIndent","skipSpacesBack","skipCharsBack","line","push","markup","map","content","children","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","parse","hostname","protocol","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","MarkdownIt","presetName","options","this","inline","block","core","renderer","linkify","configure","set","presets","self","Error","components","rules","ruler","enableOnly","rules2","ruler2","enable","list","ignoreInvalid","result","isArray","chain","missed","filter","length","disable","use","plugin","args","apply","env","State","process","tokens","render","parseInline","inlineMode","renderInline","Token","type","tag","nesting","attrs","info","meta","hidden","attrIndex","i","len","attrPush","attrData","attrSet","value","idx","attrGet","attrJoin","StateInline","md","outTokens","tokens_meta","posMax","pending","pendingLevel","cache","delimiters","_prev_delimiters","pushPending","token_meta","pop","scanDelims","start","canSplitWord","lastChar","nextChar","count","can_open","can_close","isLastWhiteSpace","isLastPunctChar","isNextWhiteSpace","isNextPunctChar","left_flanking","right_flanking","marker","terminate","l","oldParentType","nextLine","terminatorRules","getRules","parentType","isEmpty","skipChars","skipSpaces","getLines","html","xhtmlOut","breaks","langPrefix","typographer","quotes","highlight","maxNesting","curr","last","EMAIL_RE","AUTOLINK_RE","tail","linkMatch","emailMatch","fullUrl","pmax","lineMax","Ruler","__rules__","__cache__","__find__","__compile__","chains","rule","enabled","alt","altName","fn","at","index","opt","before","beforeName","ruleName","splice","after","afterName","chainName","matchStart","matchEnd","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","initial","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","offset","oldListIndent","oldSCount","oldTShift","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","tight","listIndent","Number","substr","bsCount","Math","min","tokenize","markTightParagraphs","NEWLINES_RE","NULL_RE","_rules","_rules2","postProcess","skipToken","ok","end","parseLinkLabel","parseLinkDestination","parseLinkTitle","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","DIGITAL_RE","NAMED_RE","block_names","HTML_SEQUENCES","join","lineText","ESCAPED","split","StateCore","hasEmptyLines","skipEmptyLines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","tmpAttrs","tmpToken","langName","image","renderInlineAsText","renderToken","hardbreak","softbreak","text","html_block","html_inline","nextToken","needLf","lines","getLine","escapedSplit","escapes","lastPos","backTicked","lastBackTick","substring","columns","columnCount","aligns","t","tableLines","tbodyLines","StateBlock","s","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","close","jump","open","j","startDelim","endDelim","loneMarkers","scanned","label","labelEnd","labelStart","ref","res","title","href","oldPos","references","isLinkClose","currentToken","nodes","ln","htmlLinkLevel","urlText","links","blockTokens","pretest","schema","lastIndex","tok","Core","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","thisLevel","item","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","exec","single","blkIdx","isTerminatorChar","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","params","mem","haveEndMarker","lc","isLetter","isStrong","parseReference","_endLine","destEndPos","destEndLineNo","disableNested","found","prevPos","adjustTab","lastLineEmpty","oldBMarks","oldBSCount","oldIndent","spaceAfterMarker","wasOutdented","oldLineMax","cnt"],"mappings":"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","file":"js/npm.markdown-it.aca96cc4.js","sourcesContent":["// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker and each delimiter length modulo 3.\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][closer.length % 3];\n    newMinOpenerIdx = -1;\n\n    openerIdx = closerIdx - closer.jump - 1;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (newMinOpenerIdx === -1) newMinOpenerIdx = openerIdx;\n\n      if (opener.open &&\n          opener.end < 0 &&\n          opener.level === closer.level) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            delimiters[openerIdx - 1].jump + 1 :\n            0;\n\n          closer.jump  = closerIdx - openerIdx + lastJump;\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.jump  = lastJump;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0, // disable \"rule of 3\" length checks meant for emphasis\n      jump:   i,\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n          // en-dash\n          .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n          .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n"],"sourceRoot":""}